#+PROPERTY: header-args:extempore :tangle /tmp/2013-03-20-building-extempore-on-osx-linux.xtm
#+begin_html
---
title: Building Extempore from source on OSX & Linux
alias: ["./2013-03-20-building-extempore-on-osx-linux.html"]
tags: setup osx linux
---
#+end_html

*Note:* these instructions are up to date for LLVM 3.7 (updated
September 2015). I'll try and keep this post up-to-date in the future.

* Getting the dependencies

On OSX and Linux, Extempore has three main dependencies:

- =LLVM v3.7=
- =pcre=
- =portaudio v1.9=

The one (slightly) tricky dependency is LLVM 3.7, which requires a
patch (see instructions in the next section). If you have any problems
with these versions (or success with newer/older versions) then feel
free to let me know on the [[mailto:extemporelang@googlegroups.com][Extempore mailing list]].

** Ubuntu/Debian

On Ubuntu 14.04 & Debian Wheezy, I needed the following packages

#+begin_src sh
sudo apt-get install git g++ portaudio19-dev libpcre3-dev libgl1-mesa-dev
#+end_src

** Fedora

On Fedora 18+[fn::Thanks to Tom Murphy for providing the Fedora install
tips.], you can get the dependencies with

#+BEGIN_SRC sh
sudo yum install git gcc gcc-c++ portaudio-devel pcre-devel mesa-libGL-devel gtest gtest-devel
#+END_SRC

Also, you'll need to add =/lib64/librt.so= to =PLATFORM_LIBS= (after
=-lX11=) in =config/linux.make= (for [[http://fedoraproject.org/wiki/UnderstandingDSOLinkChange][this]] reason).

** Arch Linux

From a minimal Arch Linux install, this one-liner will get the deps needed to build Extempore

#+BEGIN_SRC sh
pacman -Syu && pacman -S gcc curl make patch unzip portaudio pcre mesa-libgl python
#+END_SRC

Note that this list is up-to-date as of September 22, but with Arch's
rolling release approach this may not be true in the future.  Let me
know if you have any problems and I'll update the list.

** Other Linux

If you're on a different distro the packages should be available
through the package manager, although the package names might be
slightly different.  Consult the docs for instructions on how to
install packages on your distro.

If you want to build any of them from source you can, but unless you
have a good reason to then the package option is probably best.

** OSX

The easiest way to get the dependencies is through a package manager.
I use [[http://mxcl.github.com/homebrew/][Homebrew]], [fn:alternatives] which uses the [[https://developer.apple.com/downloads/index.action?%3Dcommand%2520line%2520tools][OSX command line
tools]]. With Homebrew, installing the dependencies is as simple as

#+begin_src sh
brew install pcre portaudio
#+end_src

* Building LLVM

Extempore has recently (September 2015) been updated to build against LLVM
3.7. Unfortunately the bug in =LLParser.cpp= hasn't yet been fixed,
so you still need to patch it. In general, this means you still have
to build LLVM from source.

The exception to this is if you're on OS X and using homebrew I've put
together a homebrew formula (=extras/extempore-llvm.rb=) which applies
the patch automatically. Since homebrew can install a formula directly
by specifying the formula path to the =brew= command line tool,
homebrew users can build their patched version of LLVM with

#+begin_src sh
brew install /path/to/extempore/extras/extempore-llvm.rb
#+end_src

If you're not using homebrew on OS X, then you'll have to patch and
build LLVM manually (you can get the LLVM 3.7 source [[http://llvm.org/releases/3.7/llvm-3.7.src.tar.gz][here]]) because a
small patch is required.

To apply the patch to the LLVM source file =LLParser.cpp= just move
into =llvm/lib/AsmParser= directory and then apply the
=llparser.patch= file which in can be found in =extempore/extras=.

#+begin_src sh
$ cd /path/to/llvm/lib/AsmParser
$ patch < /path/to/extempore/extras/llparser.patch
#+end_src

If you don't patch LLVM, then Extempore will give you a fairly cryptic
error when you try and compile any xtlang code, something like:

#+BEGIN_SRC sh
Extempore: <string>:1:22: error: use of undefined type named 'mzone'
declare void @myfunc(%mzone)                    ^
#+END_SRC

After that, building LLVM is the usual CMake process, including
specifying where everything will be installed (such as a =llvm-build=
directory)

#+begin_src sh
$ cd /path/to/llvm
$ mkdir cmake-build
$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/path/to/llvm-build -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_ZLIB=OFF ..
$ make -j4 && make install
#+end_src

* Building Extempore

Now that all of the dependencies have been built, we can compile
Extempore. First, let Extempore know where the LLVM build
directory[fn:builddir] is by defining the shell variable
=EXT_LLVM_DIR=, for example

#+begin_src sh
export EXT_LLVM_DIR=/path/to/llvm-build
#+end_src

If you used the homebrew formula the LLVM build directory will
probably be =/usr/local/Cellar/extempore-llvm/3.7=.

Then you can build Extempore using the =all.bash= shell script 

#+begin_src sh
./all.bash
#+end_src

...and you should have a shiny new =extempore= executable in your
directory to play with.

* Ok, so how do I start using Extempore?

The =extempore= executable on its own is cool, but things really start
to get interesting when you can interact with it by sending it xtlang
code to evaluate. So the next step is to [[file:2012-09-26-interacting-with-the-extempore-compiler.org][set up your text editor for
working with Extempore source code]].

It's probably worth [[file:2013-12-16-building-the-extempore-standard-library.org][building the standard library]] as well---it'll save
you heaps of time if you're restarting Extempore often.

After you're set up, then the next step is to learn about xtlang and
the Extempore runtime. The [[file:../extempore-docs/index.org][docs index]] has a complete list of all the
posts covering this stuff, and is probably the place to go next. Have
fun :)

* Optional: Precompiling the stdlib[fn:Credit_G]

Extempore includes a substantial core library (under =libs/core=) as
as well as many additional wrappers around 3rd party libraries such as
OpenGL, Cairo, Bullet, etc. (which live under =libs/external=). While
Extempore can and will compile these dynamically when you tell it to
load them, you can speed things up considerably by precompiling them
just once beforehand using the provided shell scripts. 

Running =compile-stdlib.sh= will invoke the Extempore compiler and
generate a shared library plus an xtm wrapper file in the the =libs/=
directory. When you next tell Extempore to load the library (using
=(sys:load "libs/foo/bar.xtm")=) it will try to load the precompiled
library directly from =libs/= instead, which should be significantly
faster, and fall through to the usual just-in-time compilation
approach if there isn't a precompiled version to be found.

Note that many of the library components under =libs/external= expect
various 3rd party libs to be installed on you system and will fail to
compile otherwise. You can ignore these errors if you do not need them
but if you do, take a look at the associated source file for
instructions on obtaining the required dependencies.

[fn:alternatives] If you have a preferred package manager (Fink or
Macports) or even want to build them yourself, then you can do it that
way too.

[fn:builddir] i.e. the directory we specified with the =--prefix=
argument to the LLVM =./configure= script.

[fn:Credit_G] Thanks to Giora Heller for contributing to this section.
